import { config } from 'dotenv';
import { VKApi } from './services/VKApi/index.js';

config();

class ChatAnalyzer {
  private isRunning: boolean = false;

  constructor() {
    console.log('üöÄ Chat Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async start(): Promise<void> {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω');

    await this.processData();
  }

  async stop(): Promise<void> {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = false;
    console.log('üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  private async processData(): Promise<void> {
    console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...');

    const vkApi = new VKApi();
    const data = await vkApi.getLongPollServerForChat();
    console.log(data);
    console.log(await vkApi.getLongPollHistory(data.ts || 0, data.pts || 0));
  }
}

const analyzer = new ChatAnalyzer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await analyzer.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  await analyzer.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
analyzer.start().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
  process.exit(1);
});
